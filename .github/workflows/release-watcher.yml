name: Check for new sox_ng release, and build and push if any

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:

# Add permissions needed for GHCR
permissions:
  contents: write    # Needed to update submodule and .last_seen_release
  packages: write    # Needed for GHCR

jobs:
  check-build-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sox_ng
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check latest Codeberg release
        id: poll
        run: |
          API="https://codeberg.org/api/v1/repos/sox_ng/sox_ng/releases"
          RELEASE_INFO=$(curl -s $API)
          
          if [ -z "$RELEASE_INFO" ] || [ "$RELEASE_INFO" == "[]" ]; then
            echo "Error: Failed to fetch release info or no releases found"
            exit 1
          fi
          
          # Check if the latest release is a prerelease
          IS_PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.[0].prerelease')
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "ðŸ›‘ Latest release is a prerelease, skipping"
            echo "new_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TAG=$(echo "$RELEASE_INFO" | jq -r '.[0].tag_name')
          echo "Latest release tag: $TAG"

          echo "release_tag=$TAG" >> $GITHUB_OUTPUT

          if [ -f .last_seen_release ]; then
            LAST=$(cat .last_seen_release)
          else
            LAST=""
          fi

          if [ "$TAG" != "$LAST" ]; then
            echo "âœ… New release detected!"
            echo "$TAG" > .last_seen_release
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "No new release."
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Update submodule to latest release
        if: steps.poll.outputs.new_release == 'true'
        run: |
          cd sox_ng
          git fetch --all --tags
          git checkout ${{ steps.poll.outputs.release_tag }}
          cd ..

      # Add QEMU for multi-architecture builds
      - name: Set up QEMU
        if: steps.poll.outputs.new_release == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.poll.outputs.new_release == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: steps.poll.outputs.new_release == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: steps.poll.outputs.new_release == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # My username, Ardakilic has a capital "A"
      # This is needed to set the lowercase owner name for the image, enforced by Docker
      - name: Set lowercase owner name
        if: steps.poll.outputs.new_release == 'true'
        run: |
          echo "OWNER_LC=$(echo $OWNER | tr '[:upper:]' '[:lower:]')" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Build and push Docker images
        if: steps.poll.outputs.new_release == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ steps.poll.outputs.release_tag }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.poll.outputs.release_tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      # This should be the last step, in case docker build and push fails this should not run
      - name: Save changes to repository
        if: steps.poll.outputs.new_release == 'true'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add .last_seen_release sox_ng
          git commit -m "Update sox_ng submodule to ${{ steps.poll.outputs.release_tag }}"
          git push